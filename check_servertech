#!/bin/bash


SNMP_STRING="public"

readonly OK=0
readonly WARNING=1
readonly CRITICAL=2
readonly UNKNOWN=3

readonly CHECK_SNMP_PLUGIN=/usr/lib/nagios/plugins/check_snmp
readonly TOTAL_WATTS_MIB=".1.3.6.1.4.1.1718.3.1.6.0"
readonly TOWER_ONE_AMPS_MIB=".1.3.6.1.4.1.1718.3.2.2.1.7.1.1"
readonly TOWER_TWO_AMPS_MIB=".1.3.6.1.4.1.1718.3.2.2.1.7.2.1"
readonly TOWER_COUNT_MIB=".1.3.6.1.4.1.1718.3.1.4.0"
readonly SENSOR_COUNT_MIB=".1.3.6.1.4.1.1718.3.1.5.0"
readonly TEMPERATURE_SENSOR_A1_MIB=".1.3.6.1.4.1.1718.3.2.5.1.6.1.1"
readonly TEMPERATURE_SENSOR_A2_MIB=".1.3.6.1.4.1.1718.3.2.5.1.6.1.2"
readonly TEMPERATURE_SENSOR_B1_MIB=".1.3.6.1.4.1.1718.3.2.5.1.6.2.1"
readonly TEMPERATURE_SENSOR_B2_MIB=".1.3.6.1.4.1.1718.3.2.5.1.6.2.2"
readonly HUMIDITY_SENSOR_A1_MIB=".1.3.6.1.4.1.1718.3.2.5.1.10.1.1"
readonly HUMIDITY_SENSOR_A2_MIB=".1.3.6.1.4.1.1718.3.2.5.1.10.1.2"
readonly HUMIDITY_SENSOR_B1_MIB=".1.3.6.1.4.1.1718.3.2.5.1.10.2.1"
readonly HUMIDITY_SENSOR_B2_MIB=".1.3.6.1.4.1.1718.3.2.5.1.10.2.2"

# Watts are in watts
readonly WATTS_WARN=4250
readonly WATTS_CRIT=4750

# Load is in AMPs
readonly LOAD_ALARM=24

# Temperature is in Celcius
readonly TEMPERATURE_WARN_MAX=40  # Default: 40
readonly TEMPERATURE_WARN_MIN=10  # Default: 10
readonly TEMPERATURE_CRIT_MAX=45  # Default: 45
readonly TEMPERATURE_CRIT_MIN=5   # Default: 5

# Humidity is in percentage
HUMIDITY_WARN_MAX=90
HUMIDITY_WARN_MIN=10
HUMIDITY_CRIT_MAX=95
HUMIDITY_CRIT_MIN=5

usage() {
  echo "Usage: $0 -H host -S <snmp string> [ -t ] [ -h ]"
  # TODO: add detailed help section here
  # TODO: need to add warning and critital levels, not just min/max
  exit 2;
}
CHECK_TEMPERATURE=false
CHECK_HUMIDITY=false
while getopts ":H:S:thw" opt; do
  case "${opt}" in
    H)
      PDU_HOST=${OPTARG}
      ;;
    S)
      SNMP_STRING=${OPTARG}
      ;;
    t)
      CHECK_TEMPERATURE=true
      ;;
    h)
      CHECK_HUMIDITY=true
      ;;
    *)
      usage
      ;;
  esac
done

if [ -z "${PDU_HOST}" ] ; then usage ; fi

# Make sure the check_snmp plugin is available
if ! [ -f $CHECK_SNMP_PLUGIN ] ; then
  echo "CRIT: check_snmp not found at $CHECK_SNMP_PLUGIN"
  exit $CRITICAL
fi
# Make sure BC is installed, needed for comparison data
if ! [ $(which bc) ] ; then
  echo "CRIT: bc is required to do calculations, not in path"
  exit $CRITICAL
fi

# Get the number of towers and sensor port count
get_tower_details() {
  local RAW_TOWER_CNT=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o "$TOWER_COUNT_MIB")
  readonly TOWER_CNT=$(echo $RAW_TOWER_CNT | cut -f 4 -d ' ')

  local RAW_SENSOR_CNT=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o "$SENSOR_COUNT_MIB")
  readonly SENSOR_CNT=$(echo $RAW_SENSOR_CNT | cut -f 4 -d ' ')
}

# This is the total watts used (combined if two towers)
get_power_consumed() {
  local RAW_TOTAL_WATTS=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o "$TOTAL_WATTS_MIB")
  readonly TOTAL_WATTS=$(echo $RAW_TOTAL_WATTS | cut -f 4 -d ' ')

  # This is the AMPs used, it is multiplied by 100 (5A is 500)
  # We will always check Tower 1
  local RAW_TOWER_ONE_FEED=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o "$TOWER_ONE_AMPS_MIB")
  readonly TOWER_ONE_FEED=$(echo $RAW_TOWER_ONE_FEED | cut -f 4 -d ' ')
  # Only check Tower 2 if the tower count is 2
  if [ "2" == $TOWER_CNT ] ; then
    local RAW_TOWER_TWO_FEED=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o "$TOWER_TWO_AMPS_MIB")
    readonly TOWER_TWO_FEED=$(echo $RAW_TOWER_TWO_FEED | cut -f 4 -d ' ')
  fi
}

check_power_thresholds() {
  # For now, we are going to use the ServerTech defaults
  local POWER_STATUS=0
  # Check Watts (TODO)

  # Check AMPs
  local LOAD_ALARM_CONVERT=$(echo "scale=0;($LOAD_ALARM * 100)/1" | bc)
  if [ $TOWER_ONE_FEED -gt $LOAD_ALARM_CONVERT ] ; then
    POWER_STATUS=2
    local T1_CONVERT=$(echo "scale=2;$TOWER_ONE_FEED/100" | bc)
    TOWER_ONE_MESSAGE="Tower One at $T1_CONVERT Amps"
  fi
  if [ $TOWER_TWO_FEED -gt $LOAD_ALARM_CONVERT ] ; then
    POWER_STATUS=2
    local T2_CONVERT=$(echo "scale=2;$TOWER_TWO_FEED/100" | bc)
    TOWER_TWO_MESSAGE="Tower Two at $T2_CONVERT Amps"
  fi

  if [ "0" -eq "$POWER_STATUS" ] ; then
    OVERALL_STATUS=$POWER_STATUS
    echo "Power OK"
    return
  fi 
  if [ "2" -eq "$POWER_STATUS" ] ; then
    OVERALL_STATUS=$POWER_STATUS
    local POWER_MESSAGE="Power CRIT:"
    if [ "" != "$TOWER_ONE_MESSAGE" ] ; then
      POWER_MESSAGE="$POWER_MESSAGE $TOWER_ONE_MESSAGE"
    fi
    if [ "" != "$TOWER_TWO_MESSAGE" ] ; then
      POWER_MESSAGE="$POWER_MESSAGE $TOWER_TWO_MESSAGE"
    fi
    echo "$POWER_MESSAGE"
  fi
}

check_temperature_thresholds() {
  local TEMP_STATUS=$OK
  local TEMP_A1_STATUS=$OK
  local TEMP_A2_STATUS=$OK
  local TEMP_B1_STATUS=$OK
  local TEMP_B2_STATUS=$OK
  local TEMP_CRIT_MAX_SCALE=$(echo "$TEMPERATURE_CRIT_MAX*10" | bc)
  local TEMP_CRIT_MIN_SCALE=$(echo "$TEMPERATURE_CRIT_MIN*10" | bc)
  local TEMP_WARN_MAX_SCALE=$(echo "$TEMPERATURE_WARN_MAX*10" | bc)
  local TEMP_WARN_MIN_SCALE=$(echo "$TEMPERATURE_WARN_MIN*10" | bc)

  if [ $CHECK_TEMPERATURE == "true" ] ; then
    # Time to check temps
    # Check Sensor A1
    if [ "-1" != "$TEMP_A1" ] ; then
      if [ $TEMP_A1 -gt $TEMP_CRIT_MAX_SCALE ] ||
         [ $TEMP_A1 -lt $TEMP_CRIT_MIN_SCALE ]; then
        TEMP_A1_STATUS=$CRITICAL
        TEMP_MESSAGE="A1: $TEMP_A1"
      elif [ $TEMP_A1 -gt $TEMP_WARN_MAX_SCALE ] || 
           [ $TEMP_A1 -lt $TEMP_WARN_MIN_SCALE ]; then
        TEMP_A1_STATUS=$WARNING
        TEMP_MESSAGE="A1: $TEMP_A1"
      fi
    fi
    # Check Sensor A2
    if [ "-1" != "$TEMP_A2" ] ; then
      if [ $TEMP_A2 -gt $TEMP_CRIT_MAX_SCALE ] ||
         [ $TEMP_A2 -lt $TEMP_CRIT_MIN_SCALE ]; then
        TEMP_A2_STATUS=$CRITICAL
        TEMP_MESSAGE="$TEMP_MESSAGE A2: $TEMP_A2"
      elif [ $TEMP_A2 -gt $TEMP_WARN_MAX_SCALE ] || 
           [ $TEMP_A2 -lt $TEMP_WARN_MIN_SCALE ]; then
        TEMP_A2_STATUS=$WARNING
        TEMP_MESSAGE="$TEMP_MESSAGE A2: $TEMP_A2"
      fi
    fi
    # Check Sensor B1
    if [ "-1" != "$TEMP_B1" ] ; then
      if [ $TEMP_B1 -gt $TEMP_CRIT_MAX_SCALE ] ||
         [ $TEMP_B1 -lt $TEMP_CRIT_MIN_SCALE ]; then
        TEMP_B1_STATUS=$CRITICAL
        TEMP_MESSAGE="$TEMP_MESSAGE B1: $TEMP_B1"
      elif [ $TEMP_B1 -gt $TEMP_WARN_MAX_SCALE ] || 
           [ $TEMP_B1 -lt $TEMP_WARN_MIN_SCALE ]; then
        TEMP_B1_STATUS=$WARNING
        TEMP_MESSAGE="$TEMP_MESSAGE B1: $TEMP_B1"
      fi
    fi
    # Check Sensor B2
    if [ "-1" != "$TEMP_B2" ] ; then
      if [ $TEMP_B2 -gt $TEMP_CRIT_MAX_SCALE ] ||
         [ $TEMP_B2 -lt $TEMP_CRIT_MIN_SCALE ]; then
        TEMP_B2_STATUS=$CRITICAL
        TEMP_MESSAGE="$TEMP_MESSAGE B2: $TEMP_B2"
      elif [ $TEMP_B2 -gt $TEMP_WARN_MAX_SCALE ] || 
           [ $TEMP_B2 -lt $TEMP_WARN_MIN_SCALE ]; then
        TEMP_B2_STATUS=$WARNING
        TEMP_MESSAGE="$TEMP_MESSAGE B2: $TEMP_B2"
      fi
    fi

    # is anything critical?
    if [ $TEMP_A1_STATUS == $CRITICAL ] ||
       [ $TEMP_A1_STATUS == $CRITICAL ] ||
       [ $TEMP_A1_STATUS == $CRITICAL ] ||
       [ $TEMP_A1_STATUS == $CRITICAL ] ; then
      echo "Temp CRIT: $TEMP_MESSAGE"
      # overall goes critical no matter what
      OVERALL_STATUS=$CRITIAL
      return
    fi
    # is anything warning?
    if [ $TEMP_A1_STATUS == $WARNING ] ||
       [ $TEMP_A1_STATUS == $WARNING ] ||
       [ $TEMP_A1_STATUS == $WARNING ] ||
       [ $TEMP_A1_STATUS == $WARNING ] ; then
      echo "Temp WARN: $TEMP_MESSAGE"
      # overall goes to warning, unless it is already critical
      if [ $OVERALL_STATUS != $CRITICAL ] ; then
         OVERALL_STATUS=$CRITICAL
      fi
      return
    fi
    # if neither, then leave the overall status alone
    echo "Temp OK"
    return
  fi
}

check_humidity_thresholds() {
  local HUMIDITY_STATUS=$OK
  local HUMIDITY_A1_STATUS=$OK
  local HUMIDITY_A2_STATUS=$OK
  local HUMIDITY_B1_STATUS=$OK
  local HUMIDITY_B2_STATUS=$OK

  if [ $CHECK_HUMIDITY == "true" ] ; then
    # Time to check humidity
    # Check Sensor A1
    if [ "-1" != "$HUMIDITY_A1" ] ; then
      if [ $HUMIDITY_A1 -gt $HUMIDITY_CRIT_MAX ] ||
         [ $HUMIDITY_A1 -lt $HUMIDITY_CRIT_MIN ]; then
        HUMIDITY_A1_STATUS=$CRITICAL
        HUMIDITY_MESSAGE="A1: $HUMIDITY_A1"
      elif [ $HUMIDITY_A1 -gt $HUMIDITY_WARN_MAX ] || 
           [ $HUMIDITY_A1 -lt $HUMIDITY_WARN_MIN ]; then
        HUMIDITY_A1_STATUS=$WARNING
        HUMIDITY_MESSAGE="A1: $HUMIDITY_A1"
      fi
    fi
    # Check Sensor A2
    if [ "-1" != "$HUMIDITY_A2" ] ; then
      if [ $HUMIDITY_A2 -gt $HUMIDITY_CRIT_MAX ] ||
         [ $HUMIDITY_A2 -lt $HUMIDITY_CRIT_MIN ]; then
        HUMIDITY_A2_STATUS=$CRITICAL
        HUMIDITY_MESSAGE="$HUMIDITY_MESSAGE A2: $HUMIDITY_A2"
      elif [ $HUMIDITY_A2 -gt $HUMIDITY_WARN_MAX ] || 
           [ $HUMIDITY_A2 -lt $HUMIDITY_WARN_MIN ]; then
        HUMIDITY_A2_STATUS=$WARNING
        HUMIDITY_MESSAGE="$HUMIDITY_MESSAGE A2: $HUMIDITY_A2"
      fi
    fi
    # Check Sensor B1
    if [ "-1" != "$HUMIDITY_B1" ] ; then
      if [ $HUMIDITY_B1 -gt $HUMIDITY_CRIT_MAX ] ||
         [ $HUMIDITY_B1 -lt $HUMIDITY_CRIT_MIN ]; then
        HUMIDITY_B1_STATUS=$CRITICAL
        HUMIDITY_MESSAGE="$HUMIDITY_MESSAGE B1: $HUMIDITY_B1"
      elif [ $HUMIDITY_B1 -gt $HUMIDITY_WARN_MAX ] || 
           [ $HUMIDITY_B1 -lt $HUMIDITY_WARN_MIN ]; then
        HUMIDITY_B1_STATUS=$WARNING
        HUMIDITY_MESSAGE="$HUMIDITY_MESSAGE B1: $HUMIDITY_B1"
      fi
    fi
    # Check Sensor B2
    if [ "-1" != "$HUMIDITY_B2" ] ; then
      if [ $HUMIDITY_B2 -gt $HUMIDITY_CRIT_MAX ] ||
         [ $HUMIDITY_B2 -lt $HUMIDITY_CRIT_MIN ]; then
        HUMIDITY_B2_STATUS=$CRITICAL
        HUMIDITY_MESSAGE="$HUMIDITY_MESSAGE B2: $HUMIDITY_B2"
      elif [ $HUMIDITY_B2 -gt $HUMIDITY_WARN_MAX ] || 
           [ $HUMIDITY_B2 -lt $HUMIDITY_WARN_MIN ]; then
        HUMIDITY_B2_STATUS=$WARNING
        HUMIDITY_MESSAGE="$HUMIDITY_MESSAGE B2: $HUMIDITY_B2"
      fi
    fi

    # is anything critical?
    if [ $HUMIDITY_A1_STATUS == $CRITICAL ] ||
       [ $HUMIDITY_A1_STATUS == $CRITICAL ] ||
       [ $HUMIDITY_A1_STATUS == $CRITICAL ] ||
       [ $HUMIDITY_A1_STATUS == $CRITICAL ] ; then
      echo "Humidity CRIT: $HUMIDITY_MESSAGE"
      # overall goes critical no matter what
      OVERALL_STATUS=$CRITIAL
      return
    fi
    # is anything warning?
    if [ $HUMIDITY_A1_STATUS == $WARNING ] ||
       [ $HUMIDITY_A1_STATUS == $WARNING ] ||
       [ $HUMIDITY_A1_STATUS == $WARNING ] ||
       [ $HUMIDITY_A1_STATUS == $WARNING ] ; then
      echo "Humidity WARN: $TEMP_MESSAGE"
      # overall goes to warning, unless it is already critical
      if [ $OVERALL_STATUS != $CRITICAL ] ; then
         OVERALL_STATUS=$CRITICAL
      fi
      return
    fi
    # if neither, then leave the overall status alone
    echo "Humidity OK"
    return
  fi
}

get_temperatures() {
  # if at least one tower has sensors, do detection
  if [ $SENSOR_CNT > 0 ] ; then
    local RAW_TEMP_A1=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o $TEMPERATURE_SENSOR_A1_MIB)
    local RAW_TEMP_A2=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o $TEMPERATURE_SENSOR_A2_MIB)
    readonly TEMP_A1=$(echo $RAW_TEMP_A1 | cut -f 4 -d ' ')
    readonly TEMP_A2=$(echo $RAW_TEMP_A2 | cut -f 4 -d ' ')
    if [ "2" == $SENSOR_CNT ] ; then
      local RAW_TEMP_B1=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o $TEMPERATURE_SENSOR_B1_MIB)
      local RAW_TEMP_B2=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o $TEMPERATURE_SENSOR_B2_MIB)
      readonly TEMP_B1=$(echo $RAW_TEMP_B1 | cut -f 4 -d ' ')
      readonly TEMP_B2=$(echo $RAW_TEMP_B2 | cut -f 4 -d ' ')
    else
      readonly TEMP_B1=-1
      readonly TEMP_B2=-1
    fi
  fi
}

get_humidity() {
  # if at least one tower has sensors, do detection
  if [ $SENSOR_CNT > 0 ] ; then
    local RAW_HUMIDITY_A1=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o  $HUMIDITY_SENSOR_A1_MIB)
    local RAW_HUMIDITY_A2=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o  $HUMIDITY_SENSOR_A2_MIB)
    readonly HUMIDITY_A1=$(echo $RAW_HUMIDITY_A1 | cut -f 4 -d ' ')
    readonly HUMIDITY_A2=$(echo $RAW_HUMIDITY_A2 | cut -f 4 -d ' ')
    if [ "2" == $SENSOR_CNT ] ; then
      local RAW_HUMIDITY_B1=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o $HUMIDITY_SENSOR_B1_MIB)
      local RAW_HUMIDITY_B2=$($CHECK_SNMP_PLUGIN -H $PDU_HOST -C $SNMP_STRING -o $HUMIDITY_SENSOR_B2_MIB)
      readonly HUMIDITY_B1=$(echo $RAW_HUMIDITY_B1 | cut -f 4 -d ' ')
      readonly HUMIDITY_B2=$(echo $RAW_HUMIDITY_B2 | cut -f 4 -d ' ')
    else
      readonly HUMIDITY_B1=-1
      readonly HUMIDITY_B2=-1
    fi
  fi
}

generate_performance_string() {
  local WATT_PERF="total_watts=$TOTAL_WATTS;$WATTS_WARN;$WATTS_CRIT"
  local TOWER_ONE_FEED_CONV=$(echo "scale=2; $TOWER_ONE_FEED/100" | bc)
  local TOWER_TWO_FEED_CONV=$(echo "scale=2; $TOWER_TWO_FEED/100" | bc)
  local TOWER_ONE_FEED_PERF="tower_one_amps=$TOWER_ONE_FEED_CONV;;$LOAD_ALARM"
  local TOWER_TWO_FEED_PERF="tower_one_amps=$TOWER_TWO_FEED_CONV;;$LOAD_ALARM"
  local TEMP_PERF=""
  local HUMIDITY_PERF=""

  if [ $CHECK_TEMPERATURE == "true" ] ; then
    local TEMP_A1_CONV=$(echo "scale=1; $TEMP_A1/10" | bc)
    local TEMP_A2_CONV=$(echo "scale=1; $TEMP_A2/10" | bc)
    local TEMP_B1_CONV=$(echo "scale=1; $TEMP_B1/10" | bc)
    local TEMP_B2_CONV=$(echo "scale=1; $TEMP_B2/10" | bc)
    local TEMP_RANGE_STRING="$TEMPERATURE_WARN_MAX;$TEMPERATURE_CRIT_MAX;0;100"
    if ! [ $TEMP_A1 == "-1" ] ; then
      local TEMP_PERF="temp_a1=$TEMP_A1_CONV;$TEMP_RANGE_STRING"
    fi
    if ! [ $TEMP_A2 == "-1" ] ; then
      local TEMP_PERF="$TEMP_PERF temp_a2=$TEMP_A2_CONV;$TEMP_RANGE_STRING"
    fi
    if ! [ $TEMP_B1 == "-1" ] ; then
      local TEMP_PERF="$TEMP_PERF temp_b1=$TEMP_B1_CONV;$TEMP_RANGE_STRING"
    fi
    if ! [ $TEMP_B2 == "-1" ] ; then
      local TEMP_PERF="$TEMP_PERF temp_b2=$TEMP_B2_CONV;$TEMP_RANGE_STRING"
    fi
  fi
  if [ $CHECK_HUMIDITY == "true" ] ; then
    local HUMIDITY_RANGE_STRING="$HUMIDITY_WARN_MAX;$HUMIDITY_CRIT_MAX;0;100"
    if ! [ $HUMIDITY_A1 == "-1" ] ; then
      local HUMIDITY_PERF="humidity_a1=$HUMIDITY_A1;$HUMIDITY_RANGE_STRING"
    fi
    if ! [ $HUMIDITY_A2 == "-1" ] ; then
      local HUMIDITY_PERF="$HUMIDITY_PERF humidity_a2=$HUMIDITY_A2;$HUMIDITY_RANGE_STRING"
    fi
    if ! [ $HUMIDITY_B1 == "-1" ] ; then
      local HUMIDITY_PERF="$HUMIDITY_PERF humidity_b1=$HUMIDITY_B1;$HUMIDITY_RANGE_STRING"
    fi
    if ! [ $HUMIDITY_B2 == "-1" ] ; then
      local HUMIDITY_PERF="$HUMIDITY_PERF humidity_b2=$HUMIDITY_B2;$HUMIDITY_RANGE_STRING"
    fi
  fi

  PERF_DATA="$WATT_PERF $TOWER_ONE_FEED_PERF $TOWER_TWO_FEED_PERF"
  if [ $CHECK_TEMPERATURE == "true" ] ; then
    PERF_DATA="$PERF_DATA $TEMP_PERF"
  fi
  if [ $CHECK_HUMIDITY == "true" ] ; then
    PERF_DATA="$PERF_DATA $HUMIDITY_PERF"
  fi

  echo $PERF_DATA
}

get_tower_details
get_power_consumed
if [ $CHECK_TEMPERATURE == "true" ] ; then
  get_temperatures
fi
if [ $CHECK_HUMIDITY == "true" ] ; then
  get_humidity
fi

check_power_thresholds
check_temperature_thresholds
check_humidity_thresholds

generate_performance_string
